/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.zyre

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import org.zeromq.czmq.*

class ZyreEvent {

//    static {
//        Map<String, Boolean> libraries = new LinkedHashMap<>()
//        libraries.put("zmq", false)
//        libraries.put("czmq", false)
//        libraries.put("zyre", false)
//        libraries.put("zyrejni", false)
//        ZmqNativeLoader.loadLibraries(libraries)
//    }

    private interface NativeLib : Library {
        fun zyre_event_new(node: Pointer): Pointer
        fun destroy(self: Pointer)
        fun zyre_event_type(self: Pointer): String
        fun zyre_event_peer_uuid(self: Pointer): String
        fun zyre_event_peer_name(self: Pointer): String
        fun zyre_event_peer_addr(self: Pointer): String
        fun zyre_event_headers(self: Pointer): Pointer
        fun zyre_event_header(self: Pointer, name: String): String
        fun zyre_event_group(self: Pointer): String
        fun zyre_event_msg(self: Pointer): Pointer
        fun zyre_event_get_msg(self: Pointer): Pointer
        fun zyre_event_print(self: Pointer): Unit
        fun zyre_event_test(verbose: Boolean): Unit
    }

    companion object {
        private val nativeLib: NativeLib =
            Native.load("zyre", NativeLib::class.java)

    /**
     * Self test of this class.
     */
    fun test(verbose: Boolean): Unit {
        nativeLib.zyre_event_test(verbose)
    }

    }

    var self: Pointer

    /**
     * Constructor: receive an event from the zyre node, wraps zyre_recv.
     * The event may be a control message (ENTER, EXIT, JOIN, LEAVE) or
     * data (WHISPER, SHOUT).
     */
    constructor(node: Zyre) {
        /*  TODO: if __new fails, self is null...            */
        self = nativeLib.zyre_event_new(node.self)
    }

    constructor(pointer: Pointer) {
        self = pointer
    }

    /**
     * Destructor; destroys an event instance
     */
//    @Override
//    public void close () {
//        nativeLib.zyre_event_destroy(self)
//        self = 0
//    }
//
    /**
     * Returns event type, as printable uppercase string. Choices are:
     * "ENTER", "EXIT", "JOIN", "LEAVE", "EVASIVE", "WHISPER" and "SHOUT"
     * and for the local node: "STOP"
     */
    fun type(): String {
        return nativeLib.zyre_event_type(self)
    }

    /**
     * Return the sending peer's uuid as a string
     */
    fun peerUuid(): String {
        return nativeLib.zyre_event_peer_uuid(self)
    }

    /**
     * Return the sending peer's public name as a string
     */
    fun peerName(): String {
        return nativeLib.zyre_event_peer_name(self)
    }

    /**
     * Return the sending peer's ipaddress as a string
     */
    fun peerAddr(): String {
        return nativeLib.zyre_event_peer_addr(self)
    }

    /**
     * Returns the event headers, or NULL if there are none
     */
    fun headers(): Zhash {
        return Zhash (nativeLib.zyre_event_headers(self))
    }

    /**
     * Returns value of a header from the message headers
     * obtained by ENTER. Return NULL if no value was found.
     */
    fun header(name: String): String {
        return nativeLib.zyre_event_header(self, name)
    }

    /**
     * Returns the group name that a SHOUT event was sent to
     */
    fun group(): String {
        return nativeLib.zyre_event_group(self)
    }

    /**
     * Returns the incoming message payload; the caller can modify the
     * message but does not own it and should not destroy it.
     */
    fun msg(): Zmsg {
        return Zmsg (nativeLib.zyre_event_msg(self))
    }

    /**
     * Returns the incoming message payload, and pass ownership to the
     * caller. The caller must destroy the message when finished with it.
     * After called on the given event, further calls will return NULL.
     */
    fun getMsg(): Zmsg {
        return Zmsg (nativeLib.zyre_event_get_msg(self))
    }

    /**
     * Print event to zsys log
     */
    fun print(): Unit {
        nativeLib.zyre_event_print(self)
    }

}
